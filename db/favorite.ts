interface Location {
    id: string;
    name: string;
    zip: string;
}

// Array for storing favorites
// Resets every time the server restarts
const favorites: Location[] = []; 

// varible to track number of ids assigned
let count = 0;

const generateId = () => {
    // I am setting id according to count
    // According to example, should be generated by data store
    count += 1;
    return count.toString();
};

export const create = async (name: string, zip: string) => {
    const location = {
      id: generateId(), 
      name: name,
      zip: zip,
    };
    favorites.push(location);
    return location;
};

export const getAll = async () => {
    return favorites;
};
  
export const get = async (locationId: string) => {
    const location = favorites.find((location) => location.id === locationId);
    return location;
};

export const remove = async (locationId: string) => {
    const index = favorites.findIndex((location) => location.id === locationId);
    if (index === -1) return undefined;
  
    const location = favorites.splice(index, 1);
    return location;
};
  